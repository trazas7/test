export async function getSelectedTextOrTable(): Promise<string> {
  return PowerPoint.run(async (ctx) => {
    // 1) highlighted text
    const sel = ctx.presentation.getSelectedTextRangeOrNullObject();
    await ctx.sync();
    if (!sel.isNullObject) {
      sel.load("text");
      await ctx.sync();
      if (sel.text?.trim()) return sel.text.trim();
    }

    // 2) selected shapes
    const shapes = ctx.presentation.getSelectedShapes();
    shapes.load("items");
    await ctx.sync();
    if (shapes.items.length === 0) return "";

    const shape = shapes.items[0];
    shape.load("type,name");
    await ctx.sync();

    if (shape.type === "Table") {
      // get just this tableâ€™s OOXML
      const ooxml = shape.getOoxml();
      await ctx.sync();
      return extractTextFromOOXML(ooxml.value);
    }

    // 3) textbox fallback
    shape.load("textFrame/textRange/text");
    await ctx.sync();
    return shape.textFrame?.textRange?.text?.trim() ?? "";
  });
}

function extractTextFromOOXML(xml: string): string {
  const matches = Array.from(xml.matchAll(/<a:t[^>]*>(.*?)<\/a:t>/g));
  const texts = matches.map((m) => m[1].trim()).filter(Boolean);
  // crude join into TSV: separate cells with tab, rows with newline
  return texts.join("\t").replace(/\t{2,}/g, "\n");
}