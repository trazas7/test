private buildThemeTags(): { tag: string, value: string }[] {
  const result: { tag: string, value: string }[] = [];

  Object.keys(this.selectedThemes || {}).forEach(themeKey => {
    const selected = this.selectedThemes[themeKey];
    if (selected && selected.size > 0) {
      result.push({ tag: 'Theme', value: themeKey });
    }
  });

  return result.length > 0 ? result : [{ tag: 'Theme', value: 'ALL_VALUES' }];
}

private buildSubThemeTags(): { tag: string, value: string }[] {
  const result: { tag: string, value: string }[] = [];

  Object.keys(this.selectedSubTheme || {}).forEach(themeKey => {
    const subSet = this.selectedSubTheme[themeKey];

    if (subSet && subSet.size > 0) {
      subSet.forEach(subValue => {
        result.push({ tag: 'Sub-Theme', value: subValue });
      });
    }
  });

  return result.length > 0 ? result : [{ tag: 'Sub-Theme', value: 'ALL_VALUES' }];
}
private buildAssetClassTags(): { tag: string, value: string }[] {
  const result: { tag: string, value: string }[] = [];

  (this.selectedAssetClass || new Set<string>()).forEach(asset => {
    result.push({ tag: 'Asset_Class', value: asset });
  });

  return result.length > 0 ? result : [{ tag: 'Asset_Class', value: 'ALL_VALUES' }];
}




