} else if (Office.context.host === Office.HostType.PowerPoint) {
    await PowerPoint.run(async (context) => {
        try {
            if (task.shouldSelectText || task.name === 'AD_HOC') {
                // Get active slide
                const activeSlide = context.presentation.slides.getActiveSlide();
                const shapes = activeSlide.shapes;
                shapes.load("items");
                await context.sync();
                
                // Since PowerPoint doesn't have easy text selection detection,
                // you might need to get text from all shapes and let user specify
                // or implement a different selection mechanism
                
                let combinedText = "";
                
                for (let shape of shapes.items) {
                    if (shape.type === "GeometricShape" || shape.type === "TextBox") {
                        shape.load("textFrame");
                        await context.sync();
                        
                        if (shape.textFrame && shape.textFrame.hasText) {
                            const textRange = shape.textFrame.textRange;
                            const hyperlinks = textRange.hyperlinks;
                            
                            textRange.load("text");
                            hyperlinks.load("items");
                            await context.sync();
                            
                            let shapeText = textRange.text;
                            
                            // Process hyperlinks
                            for (let i = 0; i < hyperlinks.items.length; i++) {
                                const hyperlink = hyperlinks.items[i];
                                hyperlink.load(["textToDisplay", "address", "range"]);
                            }
                            
                            await context.sync();
                            
                            for (let i = hyperlinks.items.length - 1; i >= 0; i--) {
                                const hyperlink = hyperlinks.items[i];
                                const range = hyperlink.range;
                                range.load(["start", "length"]);
                                await context.sync();
                                
                                const before = shapeText.substring(0, range.start);
                                const after = shapeText.substring(range.start + range.length);
                                shapeText = before + `<a href="${hyperlink.address}">${hyperlink.textToDisplay}</a>` + after;
                            }
                            
                            combinedText += shapeText + "\n";
                        }
                    }
                }
                
                selectedText = combinedText.trim();
            }
            // ... rest of your code
        } catch (error) {
            console.error("PowerPoint error:", error);
        }
    });
}
