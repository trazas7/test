async function getPptSelectedOrFullText(task: any): Promise<string> {
  return await PowerPoint.run(async (ctx) => {
    const shapes = ctx.presentation.getSelectedShapes();
    shapes.load("items");
    await ctx.sync();

    // If a table shape is selected…
    if (shapes.items.length) {
      shapes.items.forEach(s => s.load("type"));
      await ctx.sync();
      const tableSelected = shapes.items.some((s: any) => s.type === "Table");

      // Try to read a real text selection (works only if characters are highlighted)
      const r = ctx.presentation.getSelectedTextRangeOrNullObject();
      await ctx.sync();

      if (!r.isNullObject) {
        r.load("text");
        await ctx.sync();
        const t = (r.text ?? "").trim();
        if (t) return t;
      }

      if (tableSelected) {
        console.log("[INFO] PowerPoint API can’t read table cells unless text is actually highlighted.");
        // Tell the user what to do in your UI here.
        return "";
      }
    }

    // Non-table selection (textbox, placeholder, or text highlighted)
    const sel = ctx.presentation.getSelectedTextRangeOrNullObject();
    await ctx.sync();
    if (!sel.isNullObject) {
      sel.load("text");
      await ctx.sync();
      const t = (sel.text ?? "").trim();
      if (t) return t;
    }

    // Optional: fallback that collects non-table text only (skip tables)
    if (!task?.shouldSelectText && task?.name !== "AD_HOC") {
      return await collectAllNonTableText(ctx); // implement to skip tables entirely
    }
    return "";
  });
}