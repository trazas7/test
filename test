// Returns the selected HTML (keeps hyperlinks). Works in body + text boxes.
// Falls back to whole-body *plain text* only if you need it.
async function getWordHtml(task: { shouldSelectText: boolean; name: string }) {
  const html = await getSelectionHtml();      // selection first (keeps links)
  if (html) return html;

  if (!task.shouldSelectText && task.name !== "AD_HOC") {
    return Word.run(async (ctx) => {
      const body = ctx.document.body;
      body.load("text");
      await ctx.sync();
      return (body.text || "").trim();        // simple fallback, no links
    });
  }
  return "";
}

function getSelectionHtml(): Promise<string> {
  return new Promise((resolve) => {
    Office.context.document.getSelectedDataAsync(
      Office.CoercionType.Html,
      (res) => {
        if (res.status === Office.AsyncResultStatus.Succeeded) {
          // if you already have minimizeHtml, keep using it to trim wrappers
          const val = String(res.value || "");
          resolve(val ? minimizeHtml(val) : "");
        } else {
          resolve("");
        }
      }
    );
  });
}